{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "vscode": {
     "languageId": "sage"
    }
   },
   "source": [
    "# Example 5.4\n",
    "\n",
    "In this notebook we demonstrate how one may apply a formalism similar to that of the inverted Habiro series also to a knot which is hyperbolic, $\\mathbb{4}_1$, by leveraging the isomorphism between plus one surgery on $S^{3}_{+1}(\\mathbb{4}_1)$ and $S^{3}_{-1}(\\mathbb{4}_1)$.\n",
    "\n",
    "Following equation (5.19), we can compute the $\\hat{Z}$ invariant on plus and minus one surgerues on $\\mathbb{4}_1$ with Wilson line insertions in the representations $\\nu=0,1$ and $2$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "vscode": {
     "languageId": "sage"
    }
   },
   "outputs": [],
   "source": [
    "from pyPlumbing import Plumbing\n",
    "from sage.combinat.q_analogues import q_pochhammer\n",
    "q = var('q')\n",
    "\n",
    "def hab_pos(n):\n",
    "   \"\"\"\n",
    "      Return the Laplace transform of the n-th inverted habiro sum for +1 surgery\n",
    "      for even wilson line highest weight insertion.\n",
    "   \"\"\"\n",
    "   return (-1)**n*q**(n*(n+1)/2)/q_pochhammer(n, q**(n+1))\n",
    "\n",
    "def hab_neg(n):\n",
    "   \"\"\"\n",
    "      Return the Laplace transform of the n-th inverted habiro sum for -1 surgery\n",
    "      for even wilson line highest weight insertion.\n",
    "   \"\"\"\n",
    "   return q**(n*n)/q_pochhammer(n, q**(n+1))\n",
    "\n",
    "def hyperbolic_factor_even(n,l):\n",
    "   \"\"\"\n",
    "      Return the extra factor necessary for the inverted habiro sum on hyperbolic knots\n",
    "      with parameters n and l and even wilson line highest weight insertion.\n",
    "   \"\"\"\n",
    "   return q**(l**2-n**2+1) * q_pochhammer(n,q**(n+1)) / q_pochhammer(l,q**(l+1))\n",
    "\n",
    "def hyperbolic_factor_odd(n,l):\n",
    "   \"\"\"\n",
    "      Return the extra factor necessary for the inverted habiro sum on hyperbolic knots\n",
    "      with parameters n and l and odd wilson line highest weight insertion.\n",
    "   \"\"\"\n",
    "   return q**(l*(l-1)-n**2+3/2) * q_pochhammer(n,q**(n)) / q_pochhammer(l,q**(l))\n",
    "\n",
    "def hab_pos_odd(n):\n",
    "   \"\"\"\n",
    "      Return the Laplace transform of the n-th inverted habiro sum for +1 surgery\n",
    "      for odd wilson line highest weight insertion.\n",
    "   \"\"\"\n",
    "   return  (-1)**n*q**(n*(n+1)/2-1/4)/q_pochhammer(n, q**(n))\n",
    "\n",
    "def hab_neg_odd(n):\n",
    "   \"\"\"\n",
    "      Return the Laplace transform of the n-th inverted habiro sum for -1 surgery\n",
    "      for odd wilson line highest weight insertion.\n",
    "   \"\"\"\n",
    "   return q**(n**2-n+1/4)/q_pochhammer(n, q**(n))\n",
    "\n",
    "def habiro_3r(m): \n",
    "   return (-1)**m*q**(-m*(m+3)/2)\n",
    "def hyperbolic_factor_odd_B(n,l):\n",
    "      return habiro_3r(-n-1) * hab_neg_odd(n) / hab_pos_odd(l)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "vscode": {
     "languageId": "sage"
    }
   },
   "source": [
    "Without wilson line insertions we have"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "vscode": {
     "languageId": "sage"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Z_0(S^(3)_1(4_1))= 1 + (-1)*q + (-1)*q^5 + 1*q^10 + (-1)*q^11 + 1*q^18 + Order(q^20)\n",
      "Z_0(S^(3)_-1(4_1))= 1 + 1*q + 1*q^3 + 1*q^4 + 1*q^5 + 2*q^7 + 1*q^8 + 2*q^9 + 1*q^10 + 2*q^11 + 1*q^12 + 3*q^13 + 2*q^14 + 3*q^15 + 3*q^16 + 3*q^17 + 2*q^18 + 5*q^19 + Order(q^20)\n"
     ]
    }
   ],
   "source": [
    "print(\"Z_0(S^(3)_1(4_1))=\",sum(1/q*hab_pos(n)*(hyperbolic_factor_even(n,n)) for n in range(20)).series(q, 20))\n",
    "print(\"Z_0(S^(3)_-1(4_1))=\",sum(q*hab_neg(n)*(hyperbolic_factor_even(n,n)(q=1/q)) for n in range(20)).series(q, 20))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "vscode": {
     "languageId": "sage"
    }
   },
   "source": [
    "The first matches $\\hat{Z}_{b_0}(\\Sigma(2,3,7))$ and the second matches the order 7 Ramanujan mock theta function $F_0$ "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "vscode": {
     "languageId": "sage"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Z(Sigma(2,3,7))= q^(1/2)(4 - 4q^(1) - 4q^(5) + 4q^(10) - 4q^(11) + 4q^(18) + 4q^(30) - 4q^(41) + O(q^42))\n",
      "F_0= 1 + 1*q + 1*q^3 + 1*q^4 + 1*q^5 + 2*q^7 + 1*q^8 + 2*q^9 + 1*q^10 + 2*q^11 + 1*q^12 + 3*q^13 + 2*q^14 + 3*q^15 + 3*q^16 + 3*q^17 + 2*q^18 + 5*q^19 + Order(q^20)\n"
     ]
    }
   ],
   "source": [
    "from pyPlumbing import Plumbing\n",
    "P = Plumbing.from_Brieskorn([2,3,7])\n",
    "b0 = P.trivial_spin_c(['A',1])\n",
    "print(\"Z(Sigma(2,3,7))=\",P.zhat(['A',1],b0,20,wilson=[vector([0])]*5+[vector([0])]))\n",
    "F0 = sum(q**(n**2)/q_pochhammer(n,q**(n+1)) for n in range(20)).series(q,20)\n",
    "print(\"F_0=\", F0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "vscode": {
     "languageId": "sage"
    }
   },
   "source": [
    "With wilson line insertions in the representation $\\nu=1$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "vscode": {
     "languageId": "sage"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Z_0(S^(3)_1(4_1),W_1)= (-1) + (-1)*q^2 + (-1)*q^3 + (-1)*q^8 + 1*q^13 + Order(q^20)\n",
      "Z_0(S^(3)_-1(4_1),W_1)= 1*q + 1*q^2 + 1*q^3 + 2*q^4 + 1*q^5 + 2*q^6 + 2*q^7 + 2*q^8 + 3*q^9 + 3*q^10 + 2*q^11 + 4*q^12 + 4*q^13 + 4*q^14 + 4*q^15 + 6*q^16 + 5*q^17 + 6*q^18 + 6*q^19 + Order(q^20)\n"
     ]
    }
   ],
   "source": [
    "print(\"Z_0(S^(3)_1(4_1),W_1)=\",(-1 + sum(q**(-1-1/4)*hab_pos_odd(n)*(hyperbolic_factor_odd(n,n)) for n in range(30))).series(q, 20))\n",
    "print(\"Z_0(S^(3)_-1(4_1),W_1)=\",(-1 + q**(1+1/4)*sum(hab_neg_odd(n)*(hyperbolic_factor_odd(n,n)(q=1/q)) for n in range(20))).series(q, 20))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The first matches $\\hat{Z}_{b_0}(\\Sigma(2,3,7),W_1)$ and the second matches the order 7 Ramanujan mock theta function $F_1$ "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "vscode": {
     "languageId": "sage"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Z(Sigma(2,3,7),W_1)= q^(3/4)(4 - 4q^(2) - 4q^(3) - 4q^(8) + 4q^(13) + 4q^(22) + 4q^(25) + O(q^26))\n",
      "F_1= 1*q + 1*q^2 + 1*q^3 + 2*q^4 + 1*q^5 + 2*q^6 + 2*q^7 + 2*q^8 + 3*q^9 + 3*q^10 + 2*q^11 + 4*q^12 + 4*q^13 + 4*q^14 + 4*q^15 + 6*q^16 + 5*q^17 + 6*q^18 + 6*q^19 + Order(q^20)\n"
     ]
    }
   ],
   "source": [
    "print(\"Z(Sigma(2,3,7),W_1)=\",P.zhat(['A',1],b0,20,wilson=[vector([0])]*5+[vector([1])]))\n",
    "F1 = sum(q**(n**2)/q_pochhammer(n,q**n) for n in range(1,20)).series(q,20)\n",
    "print(\"F_1=\", F1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "vscode": {
     "languageId": "sage"
    }
   },
   "source": [
    "With wilson line insertions in the representation $\\nu=2$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "vscode": {
     "languageId": "sage"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Z_0(S^(3)_1(4_1),W_2)= 1 + (-1)*q + (-1)*q^3 + (-1)*q^5 + 1*q^16 + Order(q^20)\n",
      "Z_0(S^(3)_-1(4_1),W_2)= 1 + 1*q + 2*q^2 + 1*q^3 + 2*q^4 + 2*q^5 + 3*q^6 + 2*q^7 + 3*q^8 + 3*q^9 + 4*q^10 + 4*q^11 + 5*q^12 + 4*q^13 + 6*q^14 + 5*q^15 + 7*q^16 + 7*q^17 + 8*q^18 + 8*q^19 + Order(q^20)\n"
     ]
    }
   ],
   "source": [
    "zhat_surg = 0\n",
    "for n in range(1,10):\n",
    "    zhat_surg += hab_pos(n) * (hyperbolic_factor_even(n,n)) * (q**n + 1 + q**(-n))\n",
    "    zhat_surg += hab_pos(n) * hyperbolic_factor_even(n,n-1)\n",
    "print(\"Z_0(S^(3)_1(4_1),W_2)=\",(2+1/q+1/q**2*zhat_surg).series(q,20))\n",
    "\n",
    "zhat_surg = 0\n",
    "for n in range(1,10):\n",
    "    zhat_surg += hab_neg(n) * (hyperbolic_factor_even(n,n)(q=1/q)) * (q**n + 1 + q**(-n))\n",
    "    zhat_surg += hab_neg(n) * hyperbolic_factor_even(n,n-1)(q=1/q)\n",
    "print(\"Z_0(S^(3)_-1(4_1),W_2)=\",(1+ q*zhat_surg).series(q,20))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "vscode": {
     "languageId": "sage"
    }
   },
   "source": [
    "The first matches $\\hat{Z}_{b_0}(\\Sigma(2,3,7),W_1)$ and the second matches the order 7 Ramanujan mock theta function $F_1$ "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "vscode": {
     "languageId": "sage"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Z(Sigma(2,3,7),W_2)= q^(3/2)(1 - 1q^(1) - 1q^(3) - 1q^(5) + 1q^(16) + 1q^(20) + 1q^(26) + 1q^(31) - 1q^(53) - 1q^(60) + O(q^70))\n",
      "F_2= 1 + 1*q + 2*q^2 + 1*q^3 + 2*q^4 + 2*q^5 + 3*q^6 + 2*q^7 + 3*q^8 + 3*q^9 + 4*q^10 + 4*q^11 + 5*q^12 + 4*q^13 + 6*q^14 + 5*q^15 + 7*q^16 + 7*q^17 + 8*q^18 + 8*q^19 + Order(q^20)\n"
     ]
    }
   ],
   "source": [
    "print(\"Z(Sigma(2,3,7),W_2)=\",P.zhat(['A',1],b0,20,wilson=[vector([0])]*3+[vector([2])]))\n",
    "F2 = sum(q**(n**2+n)/q_pochhammer(n+1,q**(n+1)) for n in range(0,20)).series(q,20)\n",
    "print(\"F_2=\", F2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "So far, we have just computed the same $q$-series as in example 5.3.3 using the rewriting of equation 5.19. It is surprising that this computation can be carried forth also with higher surgery. For $\\pm 2$ suregery we have $\\pm M\\left(-1;\\frac{1}{2},\\frac{1}{4},\\frac{1}{5}\\right)$, thus we obtain"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "vscode": {
     "languageId": "sage"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Z_0(S^(3)_2(4_1))= 1 + (-1)*q + 1*q^12 + (-1)*q^19 + Order(q^20)\n",
      "Z_0(S^(3)_-2(4_1))= 1 + 1*q + 1*q^2 + 1*q^3 + 3*q^4 + 2*q^5 + 3*q^6 + 3*q^7 + 4*q^8 + 5*q^9 + 7*q^10 + 6*q^11 + 9*q^12 + 9*q^13 + 11*q^14 + 12*q^15 + 16*q^16 + 15*q^17 + 20*q^18 + 21*q^19 + Order(q^20)\n"
     ]
    }
   ],
   "source": [
    "load('3d_modularity_revisited.sage')\n",
    "zhat_surg = 0\n",
    "for n in range(1,6):\n",
    "    P = P_poly(n,2,0)\n",
    "    if not P in ZZ:\n",
    "        P = P(q=1/q)\n",
    "    zhat_surg += P*hab_pos(n)*(hyperbolic_factor_even(n,n))\n",
    "print(\"Z_0(S^(3)_2(4_1))=\",(1+1/q*zhat_surg).series(q,20))\n",
    "zhat_surg = 0\n",
    "for n in range(1,6):\n",
    "    P = P_poly(n,2,0)\n",
    "    zhat_surg += P*hab_neg(n)*(hyperbolic_factor_even(n,n)(q=1/q))\n",
    "print(\"Z_0(S^(3)_-2(4_1))=\",(zhat_surg).series(q,20))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "vscode": {
     "languageId": "sage"
    }
   },
   "source": [
    "The first matches $ \\hat{Z}_{b_0}(M\\left(-1;\\frac{1}{2},\\frac{1}{4},\\frac{1}{5}\\right))$ and the second matches the the first line in table 9 of [2]."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "vscode": {
     "languageId": "sage"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Z(M(-1;1/2,1/4,1/5))= q^(1/4)(1 - 1q^(1) + 1q^(12) - 1q^(19) + O(q^20))\n"
     ]
    }
   ],
   "source": [
    "P = Plumbing.from_Seifert_data([-1,1/2,1/4,1/5])\n",
    "b0 = P.trivial_spin_c(['A',1])\n",
    "print(\"Z(M(-1;1/2,1/4,1/5))=\",P.zhat(['A',1],b0,20,wilson=[vector([0])]*3+[vector([0])]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "vscode": {
     "languageId": "sage"
    }
   },
   "source": [
    "With a wilson line insertion in the representation with highest weight $\\nu=1$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "vscode": {
     "languageId": "sage"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Z_0(S^(3)_1(4_1),W_1)= 1 + 1*q^2 + (-1)*q^9 + (-1)*q^17 + Order(q^20)\n",
      "Z_0(S^(3)_-1(4_1),W_1)= (-1)*q + (-2)*q^2 + (-1)*q^3 + (-3)*q^4 + (-3)*q^5 + (-4)*q^6 + (-4)*q^7 + (-6)*q^8 + (-6)*q^9 + (-9)*q^10 + (-8)*q^11 + (-12)*q^12 + (-13)*q^13 + (-16)*q^14 + (-16)*q^15 + (-21)*q^16 + (-23)*q^17 + (-28)*q^18 + (-30)*q^19 + Order(q^20)\n"
     ]
    }
   ],
   "source": [
    "zhat_surg = 0\n",
    "for n in range(0,7):\n",
    "    P = P_poly(n,2,0)\n",
    "    if not P in ZZ:\n",
    "        P = P(q=1/q)\n",
    "    zhat_surg += hab_pos_odd(n)*(hyperbolic_factor_odd(n,n))*P\n",
    "print(\"Z_0(S^(3)_1(4_1),W_1)=\",(1-zhat_surg*q**(-1/4-1)).series(q,20))\n",
    "zhat_surg = 0\n",
    "for n in range(0,7):\n",
    "    P = P_poly(n,2,0)\n",
    "    zhat_surg += hab_neg_odd(n)*(hyperbolic_factor_odd(n,n)(q=1/q))*P\n",
    "print(\"Z_0(S^(3)_-1(4_1),W_1)=\",(1-zhat_surg*q**(1/4+1)).series(q,20))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "vscode": {
     "languageId": "sage"
    }
   },
   "source": [
    "The first matches $ \\hat{Z}_{b_0}(M\\left(-1;\\frac{1}{2},\\frac{1}{4},\\frac{1}{5}\\right),W_1)$ and the second matches the the second line in table 9 of [2]."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "vscode": {
     "languageId": "sage"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Z(M(-1;1/2,1/4,1/5))= q^(1/2)(1 - 1q^(2) + 1q^(9) + 1q^(17) - 1q^(23) - 1q^(35) + 1q^(56) + O(q^57))\n"
     ]
    }
   ],
   "source": [
    "P = Plumbing.from_Seifert_data([-1,1/2,1/4,1/5])\n",
    "print(\"Z(M(-1;1/2,1/4,1/5))=\",P.zhat(['A',1],b0,20,wilson=[vector([0])]*3+[vector([1])]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "vscode": {
     "languageId": "sage"
    }
   },
   "source": [
    "With a wilson line insertion in the representation with highest weight $\\nu=2$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "vscode": {
     "languageId": "sage"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Z_0(S^(3)_1(4_1),W_2)= 1 + (-1)*q^3 + 1*q^6 + 1*q^13 + Order(q^14)\n",
      "Z_0(S^(3)_1(4_-1),W_2)= 1*q + 1*q^2 + 2*q^3 + 2*q^4 + 3*q^5 + 3*q^6 + 4*q^7 + 5*q^8 + 7*q^9 + 7*q^10 + 8*q^11 + 10*q^12 + 13*q^13 + 13*q^14 + 17*q^15 + 19*q^16 + 22*q^17 + 25*q^18 + 29*q^19 + Order(q^20)\n"
     ]
    }
   ],
   "source": [
    "zhat_surg = 0\n",
    "for n in range(1,7):\n",
    "    P = P_poly(n,2,0)\n",
    "    if not P in ZZ:\n",
    "        P = P(q=1/q)\n",
    "    zhat_surg += P * hab_pos(n) * (hyperbolic_factor_even(n,n)) * (q**n + 1 + q**(-n))\n",
    "    zhat_surg += P * hab_pos(n) * hyperbolic_factor_even(n,n-1)\n",
    "print(\"Z_0(S^(3)_1(4_1),W_2)=\",(1/q+2+q**(-2)*zhat_surg).series(q,14))\n",
    "zhat_surg = 0\n",
    "for n in range(1,7):\n",
    "    P = P_poly(n,2,0)\n",
    "    zhat_surg += P * hab_neg(n) * (hyperbolic_factor_even(n,n)(q=1/q)) * (q**n + 1 + q**(-n))\n",
    "    zhat_surg += P * hab_neg(n) * hyperbolic_factor_even(n,n-1)(q=1/q)\n",
    "print(\"Z_0(S^(3)_1(4_-1),W_2)=\",(q+q**(2)*zhat_surg).series(q,20))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "vscode": {
     "languageId": "sage"
    }
   },
   "source": [
    "The first matches $ \\hat{Z}_{b_0}(M\\left(-1;\\frac{1}{2},\\frac{1}{4},\\frac{1}{5}\\right),W_2)$ and the second matches the fourth line in table 9 of [2]."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "vscode": {
     "languageId": "sage"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Z_0(S^(3)_1(4_1),W_2)= 2 + (-1)*q + (-1)*q^3 + 1*q^4 + 1*q^8 + (-1)*q^9 + 1*q^12 + Order(q^14)\n",
      "Z_0(S^(3)_1(4_-1),W_2)= 1*q + 1*q^2 + 2*q^3 + 1*q^4 + 3*q^5 + 3*q^6 + 4*q^7 + 3*q^8 + 6*q^9 + 7*q^10 + 8*q^11 + 8*q^12 + 10*q^13 + 12*q^14 + 16*q^15 + 16*q^16 + 20*q^17 + 22*q^18 + 24*q^19 + Order(q^20)\n"
     ]
    }
   ],
   "source": [
    "zhat_surg = 0\n",
    "for n in range(1,7):\n",
    "    P = P_poly(n,2,0)\n",
    "    if not P in ZZ:\n",
    "        P = P(q=1/q)\n",
    "    zhat_surg += P * hab_pos(n) * (hyperbolic_factor_even(n,n)) * (q**n + 1 + q**(-n))\n",
    "    zhat_surg += P * hab_pos(n) * hyperbolic_factor_even(n,n-1)\n",
    "print(\"Z_0(S^(3)_1(4_1),W_2)=\",(1/q+2+q**(-2)*zhat_surg).series(q,14))\n",
    "zhat_surg = 0\n",
    "for n in range(1,7):\n",
    "    P = P_poly(n,2,0)\n",
    "    zhat_surg += P * hab_neg(n) * (hyperbolic_factor_even(n,n)(q=1/q)) * (q**n + 1 + q**(-n))\n",
    "    zhat_surg += P * hab_neg(n) * hyperbolic_factor_even(n,n-1)(q=1/q)\n",
    "print(\"Z_0(S^(3)_1(4_-1),W_2)=\",(q+q**(2)*zhat_surg).series(q,20))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "vscode": {
     "languageId": "sage"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Z(M(-1;1/2,1/4,1/5))= q^(13/8)(-1 + 1q^(9) + 1q^(12) - 1q^(28) - 1q^(33) + O(q^34))\n"
     ]
    }
   ],
   "source": [
    "P = Plumbing.from_Seifert_data([-1,1/2,1/4,1/5])\n",
    "print(\"Z(M(-1;1/2,1/4,1/5))=\",P.zhat(['A',1],b0,20,wilson=[vector([0])]*2+[vector([1]),vector([2])]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "vscode": {
     "languageId": "sage"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "index = 1\n",
      "theta_{1}^{m+K} = -theta(20, 39) + theta(20, 31) - theta(20, 9) + theta(20, 1)\n",
      "theta_{1}^{m+K} = 2*q^(1/80)*(1.0 + (-1.0)*q + 1*q^12 + (-1.0)*q^19 + 1*q^21 + (-1.0)*q^30 + Order(q^50))\n",
      "index = 3\n",
      "theta_{3}^{m+K} = -theta(20, 37) - theta(20, 27) + theta(20, 13) + theta(20, 3)\n",
      "theta_{3}^{m+K} = 2*q^(9/80)*(1.0 + 1*q^2 + (-1.0)*q^9 + (-1.0)*q^17 + 1*q^23 + 1*q^35 + Order(q^50))\n",
      "index = 4\n",
      "theta_{4}^{m+K} = -theta(20, 36) - theta(20, 24) + theta(20, 16) + theta(20, 4)\n",
      "theta_{4}^{m+K} = 2*q^(1/5)*(1.0 + 1*q^3 + (-1.0)*q^7 + (-1.0)*q^16 + 1*q^24 + 1*q^39 + Order(q^50))\n",
      "index = 7\n",
      "theta_{7}^{m+K} = -theta(20, 33) - theta(20, 23) + theta(20, 17) + theta(20, 7)\n",
      "theta_{7}^{m+K} = 2*q^(49/80)*(1.0 + 1*q^3 + (-1.0)*q^6 + (-1.0)*q^13 + 1*q^27 + 1*q^40 + (-1.0)*q^49 + Order(q^50))\n",
      "index = 8\n",
      "theta_{8}^{m+K} = -theta(20, 32) - theta(20, 28) + theta(20, 12) + theta(20, 8)\n",
      "theta_{8}^{m+K} = 2*q^(4/5)*(1.0 + 1*q + (-1.0)*q^9 + (-1.0)*q^12 + 1*q^28 + 1*q^33 + Order(q^50))\n",
      "index = 11\n",
      "theta_{11}^{m+K} = -theta(20, 29) + theta(20, 21) - theta(20, 19) + theta(20, 11)\n",
      "theta_{11}^{m+K} = 2*q^(121/80)*(1.0 + (-1.0)*q^3 + 1*q^4 + (-1.0)*q^9 + 1*q^31 + (-1.0)*q^42 + 1*q^45 + Order(q^50))\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "m = 4*5\n",
    "K = [1,4]\n",
    "p = np.array([2,4,5])\n",
    "load(\"weil_rep_fncs.sage\")\n",
    "proj = weil_projector(m,K)\n",
    "ind = [np.arange(2*m)[p != 0] for p in proj if len(np.arange(2*m)[p != 0]>0)]\n",
    "signs = [np.sign((p)[ p != 0]) for p in proj if len(np.arange(2*m)[p != 0]>0)]\n",
    "reps = list()\n",
    "rep_sgns = list()\n",
    "for rep,sgn in zip(ind,signs):\n",
    "    if not list(rep) in reps:\n",
    "        reps += [list(rep)]\n",
    "        rep_sgns += [list(sgn)]\n",
    "th = function('theta', nargs=2)\n",
    "for rep,rep_sgn in zip(reps,rep_sgns):\n",
    "    print(\"index = %s\" % rep[0])\n",
    "    print(\"theta_{\"+str(rep[0])+\"}^{m+K} = %s\" % sum(int(s)*th(m,r) for r,s in zip(rep,rep_sgn)))\n",
    "    theta_expansion = 0\n",
    "    for r,s in zip(rep,rep_sgn):\n",
    "        theta_expansion += s*false_theta(m,int(r),50)\n",
    "    print(\"theta_{\"+str(rep[0])+\"}^{m+K} = %s\" % format_expansion(theta_expansion,50k))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {
    "vscode": {
     "languageId": "sage"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "nu2,nu3 0 0\n",
      "Z(M(-2;1/2,1/4,1/5))= q^(7/4)(-1 + 1q^(3) - 1q^(4) + 1q^(9) + O(q^10))\n",
      "nu2,nu3 0 1\n",
      "Z(M(-2;1/2,1/4,1/5))= q^(1)(-1 - 1q^(3) + 1q^(6) + 1q^(13) + O(q^14))\n",
      "nu2,nu3 0 2\n",
      "Z(M(-2;1/2,1/4,1/5))= q^(3/4)(-1 - 1q^(2) + 1q^(9) + 1q^(17) - 1q^(23) - 1q^(35) + 1q^(56) + 1q^(74) + O(q^75))\n",
      "nu2,nu3 0 3\n",
      "Z(M(-2;1/2,1/4,1/5))= q^(1)(-1 - 1q^(1) + 1q^(12) - 1q^(19) + 1q^(21) - 1q^(30) + 1q^(63) + O(q^64))\n",
      "nu2,nu3 1 0\n",
      "Z(M(-2;1/2,1/4,1/5))= q^(29/8)(-1 + 1q^(4) + 1q^(13) - 1q^(21) - 1q^(36) + 1q^(48) + O(q^49))\n",
      "nu2,nu3 1 1\n",
      "Z(M(-2;1/2,1/4,1/5))= q^(19/8)(-1 + 1q^(8) + 1q^(11) - 1q^(27) - 1q^(32) + 1q^(56) + O(q^57))\n",
      "nu2,nu3 1 2\n",
      "Z(M(-2;1/2,1/4,1/5))= q^(13/8)(-1 + 1q^(9) + 1q^(12) - 1q^(28) - 1q^(33) + O(q^34))\n",
      "nu2,nu3 1 3\n",
      "Z(M(-2;1/2,1/4,1/5))= q^(11/8)(-1 + 1q^(7) + 1q^(16) - 1q^(24) - 1q^(39) + O(q^40))\n",
      "nu2,nu3 2 0\n",
      "Z(M(-2;1/2,1/4,1/5))= q^(9/4)(-1 + 1q^(3) - 1q^(4) + 1q^(9) - 1q^(31) + 1q^(42) - 1q^(45) + 1q^(58) + O(q^59))\n",
      "nu2,nu3 2 1\n",
      "Z(M(-2;1/2,1/4,1/5))= q^(3/2)(-1 - 1q^(3) + 1q^(6) + 1q^(13) - 1q^(27) - 1q^(40) + 1q^(49) + 1q^(66) + O(q^67))\n",
      "nu2,nu3 2 2\n",
      "Z(M(-2;1/2,1/4,1/5))= q^(5/4)(-1 - 1q^(2) + 1q^(9) + 1q^(17) - 1q^(23) - 1q^(35) + 1q^(56) + 1q^(74) + O(q^75))\n",
      "nu2,nu3 2 3\n",
      "Z(M(-2;1/2,1/4,1/5))= q^(3/2)(-1 - 1q^(1) + 1q^(12) - 1q^(19) + 1q^(21) - 1q^(30) + 1q^(63) + O(q^64))\n"
     ]
    }
   ],
   "source": [
    "for nu2,nu3 in itertools.product(range(3),range(4)):\n",
    "    print(\"nu2,nu3\", nu2, nu3)\n",
    "    print(\"Z(M(-2;1/2,1/4,1/5))=\",P.zhat(['A',1],b_list[0],20,wilson=[vector([0])]+[vector([0]),vector([nu2]),vector([nu3])]))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "vscode": {
     "languageId": "sage"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "nu2,nu3 0 0\n",
      "Z(M(-2;1/2,1/4,1/5))= q^(1/4)(1 - 1q^(1) + 1q^(12) - 1q^(19) + O(q^20))\n",
      "nu2,nu3 0 1\n",
      "Z(M(-2;1/2,1/4,1/5))= q^(1/2)(1 - 1q^(2) + 1q^(9) + 1q^(17) - 1q^(23) - 1q^(35) + 1q^(56) + O(q^57))\n",
      "nu2,nu3 0 2\n",
      "Z(M(-2;1/2,1/4,1/5))= q^(5/4)(1 - 1q^(3) + 1q^(6) + 1q^(13) - 1q^(27) - 1q^(40) + 1q^(49) + O(q^50))\n",
      "nu2,nu3 0 3\n",
      "Z(M(-2;1/2,1/4,1/5))= q^(5/2)(1 + 1q^(3) - 1q^(4) + 1q^(9) - 1q^(31) + 1q^(42) - 1q^(45) + O(q^46))\n",
      "nu2,nu3 1 0\n",
      "Z(M(-2;1/2,1/4,1/5))= q^(29/8)(-1 + 1q^(4) + 1q^(13) - 1q^(21) - 1q^(36) + 1q^(48) + O(q^49))\n",
      "nu2,nu3 1 1\n",
      "Z(M(-2;1/2,1/4,1/5))= q^(19/8)(-1 + 1q^(8) + 1q^(11) - 1q^(27) - 1q^(32) + 1q^(56) + O(q^57))\n",
      "nu2,nu3 1 2\n",
      "Z(M(-2;1/2,1/4,1/5))= q^(13/8)(-1 + 1q^(9) + 1q^(12) - 1q^(28) - 1q^(33) + O(q^34))\n",
      "nu2,nu3 1 3\n",
      "Z(M(-2;1/2,1/4,1/5))= q^(11/8)(-1 + 1q^(7) + 1q^(16) - 1q^(24) - 1q^(39) + O(q^40))\n",
      "nu2,nu3 2 0\n",
      "Z(M(-2;1/2,1/4,1/5))= q^(3/4)(-1 + 1q^(1) + 1q^(12) - 1q^(19) + 1q^(21) - 1q^(30) + O(q^31))\n",
      "nu2,nu3 2 1\n",
      "Z(M(-2;1/2,1/4,1/5))= q^(1)(-1 + 1q^(2) + 1q^(9) + 1q^(17) - 1q^(23) - 1q^(35) + O(q^36))\n",
      "nu2,nu3 2 2\n",
      "Z(M(-2;1/2,1/4,1/5))= q^(7/4)(-1 + 1q^(3) + 1q^(6) + 1q^(13) - 1q^(27) - 1q^(40) + O(q^41))\n",
      "nu2,nu3 2 3\n",
      "Z(M(-2;1/2,1/4,1/5))= q^(3)(-1 + 1q^(3) + 1q^(4) + 1q^(9) - 1q^(31) + O(q^32))\n"
     ]
    }
   ],
   "source": [
    "for nu1,nu3 in itertools.product(range(3),range(4)):\n",
    "    print(\"nu2,nu3\", nu2, nu3)\n",
    "    print(\"Z(M(-2;1/2,1/4,1/5))=\",P.zhat(['A',1],b_list[0],20,wilson=[vector([0])]+[vector([0]),vector([nu2]),vector([nu3])]))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "vscode": {
     "languageId": "sage"
    }
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "SageMath 10.4",
   "language": "sage",
   "name": "sagemath"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
